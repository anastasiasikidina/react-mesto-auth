{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co';\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: \"POST\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"email\": email,\n      \"password\": password\n    })\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(new Error(`Что-то пошло не так ${res.status}`));\n  });\n};\nexport const login = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      \"email\": email,\n      \"password\": password\n    })\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(new Error(`Что-то пошло не так: ${res.status}`));\n  }).then(data => {\n    if (data.token) {\n      localStorage.setItem('jwt', data.token);\n      return data;\n    }\n  });\n};\nexport const checkToken = jwt => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${jwt}`\n    }\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(new Error(`Что-то пошло не так ${res.status}`));\n  });\n};","map":{"version":3,"sources":["C:/Users/Anastasia/dev/mesto-react-auth/src/utils/auth.js"],"names":["BASE_URL","register","email","password","fetch","method","headers","body","JSON","stringify","then","res","ok","json","Promise","reject","Error","status","login","data","token","localStorage","setItem","checkToken","jwt"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,+BAAjB;AACP,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAmB;AACzC,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAsB;AAC9BK,IAAAA,MAAM,EAAE,MADsB;AAE9BC,IAAAA,OAAO,EAAC;AACJ,gBAAU,kBADN;AAEJ,sBAAgB;AAFZ,KAFsB;AAM9BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjB,eAASP,KADQ;AAEjB,kBAAYC;AAFK,KAAf;AANwB,GAAtB,CAAL,CAWFO,IAXE,CAWIC,GAAD,IAAO;AACT,QAAIA,GAAG,CAACC,EAAR,EAAY;AACR,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;;AACD,WAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAW,uBAAsBL,GAAG,CAACM,MAAO,EAA5C,CAAf,CAAP;AACH,GAhBE,CAAP;AAiBD,CAlBM;AAmBP,OAAO,MAAMC,KAAK,GAAG,CAAChB,KAAD,EAAQC,QAAR,KAAmB;AACtC,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAsB;AAC9BK,IAAAA,MAAM,EAAE,MADsB;AAE9BC,IAAAA,OAAO,EAAC;AACJ,sBAAe;AADX,KAFsB;AAK9BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjB,eAASP,KADQ;AAEjB,kBAAYC;AAFK,KAAf;AALwB,GAAtB,CAAL,CAUFO,IAVE,CAUIC,GAAD,IAAS;AACX,QAAIA,GAAG,CAACC,EAAR,EAAY;AACR,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;;AACD,WAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAW,wBAAuBL,GAAG,CAACM,MAAO,EAA7C,CAAf,CAAP;AACH,GAfE,EAgBFP,IAhBE,CAgBIS,IAAD,IAAU;AACZ,QAAIA,IAAI,CAACC,KAAT,EAAe;AACXC,MAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BH,IAAI,CAACC,KAAjC;AACA,aAAOD,IAAP;AACH;AACJ,GArBE,CAAP;AAuBD,CAxBM;AAyBP,OAAO,MAAMI,UAAU,GAAKC,GAAD,IAAO;AAChC,SAAOpB,KAAK,CAAE,GAAEJ,QAAS,WAAb,EAAwB;AAChCK,IAAAA,MAAM,EAAE,KADwB;AAEhCC,IAAAA,OAAO,EAAC;AACJ,sBAAe,kBADX;AAEJ,uBAAmB,UAASkB,GAAI;AAF5B;AAFwB,GAAxB,CAAL,CAOFd,IAPE,CAOIC,GAAD,IAAS;AACX,QAAIA,GAAG,CAACC,EAAR,EAAY;AACR,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;;AACD,WAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAW,uBAAsBL,GAAG,CAACM,MAAO,EAA5C,CAAf,CAAP;AACH,GAZE,CAAP;AAaD,CAdM","sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co';\nexport const register = (email, password)=>{\n  return fetch(`${BASE_URL}/signup`,{\n      method: \"POST\",\n      headers:{\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n          \"email\": email,\n          \"password\": password\n          })\n  })\n      .then((res)=>{\n          if (res.ok) {\n              return res.json();\n          }\n          return Promise.reject(new Error(`Что-то пошло не так ${res.status}`))\n      })\n}\nexport const login = (email, password)=>{\n  return fetch(`${BASE_URL}/signin`,{\n      method: \"POST\",\n      headers:{\n          \"Content-Type\":\"application/json\"\n      },\n      body: JSON.stringify({\n          \"email\": email,\n          \"password\": password\n           })\n  })\n      .then((res) => {\n          if (res.ok) {\n              return res.json();\n          }\n          return Promise.reject(new Error(`Что-то пошло не так: ${res.status}`))\n      })\n      .then((data) => {\n          if (data.token){\n              localStorage.setItem('jwt', data.token);\n              return data;\n          }\n      })\n\n}\nexport const checkToken  = (jwt)=>{\n  return fetch(`${BASE_URL}/users/me`,{\n      method: \"GET\",\n      headers:{\n          \"Content-Type\":\"application/json\",\n          \"Authorization\" : `Bearer ${jwt}`\n      },\n  })\n      .then((res) => {\n          if (res.ok) {\n              return res.json();\n          }\n          return Promise.reject(new Error(`Что-то пошло не так ${res.status}`))\n      })\n}"]},"metadata":{},"sourceType":"module"}